{"/home/travis/build/npmtest/node-npmtest-git-release-notes/test.js":"/* istanbul instrument in package npmtest_git_release_notes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-release-notes/lib.npmtest_git_release_notes.js":"/* istanbul instrument in package npmtest_git_release_notes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_git_release_notes = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_git_release_notes = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-git-release-notes/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-git-release-notes && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_git_release_notes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_git_release_notes\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_git_release_notes.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_git_release_notes.rollup.js'] =\n            local.assetsDict['/assets.npmtest_git_release_notes.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_git_release_notes.__dirname + '/lib.npmtest_git_release_notes.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-release-notes/node_modules/git-release-notes/index.js":"#!/usr/bin/env node\nvar argv = require(\"optimist\").usage(\"release-notes [<options>] <since>..<until> <template>\")\n.options(\"f\", {\n\t\"alias\" : \"file\"\n})\n.options(\"p\", {\n\t\"alias\" : \"path\",\n\t\"default\" : process.cwd()\n})\n.options(\"t\", {\n\t\"alias\" : \"title\",\n\t\"default\" : \"(.*)\"\n})\n.options(\"m\", {\n\t\"alias\" : \"meaning\",\n\t\"default\" : ['type']\n})\n.options(\"b\", {\n\t\"alias\" : \"branch\",\n\t\"default\" : \"master\"\n})\n.describe({\n\t\"f\" : \"Configuration file\",\n\t\"p\" : \"Git project path\",\n\t\"t\" : \"Commit title regular expression\",\n\t\"m\" : \"Meaning of capturing block in title's regular expression\",\n\t\"b\" : \"Git branch, defaults to master\"\n})\n.boolean(\"version\")\n.check(function (argv) {\n\tif (argv._.length == 2) {\n\t\treturn true;\n\t}\n\tthrow \"Invalid parameters, please specify an interval and the template\";\n})\n.argv;\n\nvar git = require(\"./lib/git\");\nvar fs = require(\"fs\");\nvar ejs = require(\"ejs\");\nvar path = require(\"path\");\nvar debug = require(\"debug\")(\"release-notes:cli\");\n\nvar template = argv._[1];\ndebug(\"Trying to locate template '%s'\", template);\nif (!fs.existsSync(template)) {\n\tdebug(\"Template file '%s' doesn't exist, maybe it's template name\", template);\n\t// Template name?\n\tif (template.match(/[a-z]+(\\.ejs)?/)) {\n\t\ttemplate = path.resolve(__dirname, \"./templates/\" + path.basename(template, \".ejs\") + \".ejs\");\n\t} else {\n\t\trequire(\"optimist\").showHelp();\n\t\tconsole.error(\"\\nUnable to locate template file \" + template);\n\t\tprocess.exit(1);\n\t}\n}\ndebug(\"Trying to read template '%s'\", template);\nfs.readFile(template, function (err, templateContent) {\n\tif (err) {\n\t\trequire(\"optimist\").showHelp();\n\t\tconsole.error(\"\\nUnable to locate template file \" + argv._[1]);\n\t\tprocess.exit(5);\n\t} else {\n\t\tgetOptions(function (options) {\n\t\t\tdebug(\"Running git log in '%s' on branch '%s' with range '%s'\", options.p, options.b, argv._[0]);\n\t\t\tgit.log({\n\t\t\t\tbranch : options.b,\n\t\t\t\trange : argv._[0],\n\t\t\t\ttitle : new RegExp(options.t),\n\t\t\t\tmeaning : Array.isArray(options.m) ? options.m : [options.m],\n\t\t\t\tcwd : options.p\n\t\t\t}, function (commits) {\n\t\t\t\tdebug(\"Got %d commits\", commits.length);\n\t\t\t\tif (commits.length) {\n\t\t\t\t\tdebug(\"Rendering template\");\n\t\t\t\t\tvar output = ejs.render(templateContent.toString(), {\n\t\t\t\t\t\tcommits : commits\n\t\t\t\t\t});\n\t\t\t\t\tprocess.stdout.write(output + \"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('No commits in the specified range');\n\t\t\t\t\tprocess.exit(6);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n});\n\nfunction getOptions (callback) {\n\tif (argv.f) {\n\t\tdebug(\"Trying to read configuration file '%s'\", argv.f);\n\t\tfs.readFile(argv.f, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\tconsole.error(\"Unable to read configuration file\\n\" + err.message);\n\t\t\t} else {\n\t\t\t\tvar options;\n\t\t\t\ttry {\n\t\t\t\t\tvar stored = JSON.parse(data);\n\t\t\t\t\toptions = {\n\t\t\t\t\t\tb : stored.b || stored.branch || argv.b,\n\t\t\t\t\t\tt : stored.t || stored.title || argv.t,\n\t\t\t\t\t\tm : stored.m || stored.meaning || argv.m,\n\t\t\t\t\t\tp : stored.p || stored.path || argv.p\n\t\t\t\t\t};\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tconsole.error(\"Invalid JSON in configuration file\");\n\t\t\t\t}\n\t\t\t\tif (options) {\n\t\t\t\t\tcallback(options);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else {\n\t\tcallback(argv);\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-git-release-notes/node_modules/git-release-notes/lib/git.js":"var debug = require(\"debug\")(\"release-notes:git\");\nvar parser = require(\"debug\")(\"release-notes:parser\");\n\nexports.log = function (options, callback) {\n\tvar spawn = require(\"child_process\").spawn;\n\tvar gitArgs = [\"log\", \"--no-color\", \"--no-merges\", \"--branches=\" + options.branch, \"--format=\" + formatOptions, options.range];\n\tdebug(\"Spawning git with args %o\", gitArgs);\n\tvar gitLog = spawn(\"git\", gitArgs, {\n\t\tcwd : options.cwd,\n\t\tstdio : [\"ignore\", \"pipe\", process.stderr]\n\t});\n\n\tvar allCommits = \"\";\n\tgitLog.stdout.on(\"data\", function (data) {\n\t\tallCommits += data;\n\t});\n\n\tgitLog.on(\"exit\", function (code) {\n\t\tdebug(\"Git command exited with code '%d'\", code);\n\t\tif (code === 0) {\n\t\t\tallCommits = normalizeNewlines(allCommits).trim();\n\n\t\t\tif (allCommits) {\n\t\t\t\t// Build the list of commits from git log\n\t\t\t\tvar commits = processCommits(allCommits, options);\n\t\t\t\tcallback(commits);\n\t\t\t} else {\n\t\t\t\tcallback([]);\n\t\t\t}\n\t\t}\n\t});\n};\n\nvar newCommit = \"___\";\nvar formatOptions = [\n\tnewCommit, \"sha1:%H\", \"authorName:%an\", \"authorEmail:%ae\", \"authorDate:%aD\",\n\t\"committerName:%cn\", \"committerEmail:%ce\", \"committerDate:%cD\",\n\t\"title:%s\", \"%w(80,1,1)%b\"\n].join(\"%n\");\n\nfunction processCommits (commitMessages, options) {\n\t// This return an object with the same properties described above\n\tvar stream = commitMessages.split(\"\\n\");\n\tvar commits = [];\n\tvar workingCommit;\n\tparser(\"Iterating on %d lines\", stream.length);\n\tstream.forEach(function (rawLine) {\n\t\tparser(\"Raw line\\n\\t%s\", rawLine);\n\t\tvar line = parseLine(rawLine);\n\t\tparser(\"Parsed line %o\", line);\n\t\tif (line.type === \"new\") {\n\t\t\tworkingCommit = {\n\t\t\t\tmessageLines : []\n\t\t\t};\n\t\t\tcommits.push(workingCommit);\n\t\t} else if (line.type === \"message\") {\n\t\t\tworkingCommit.messageLines.push(line.message);\n\t\t} else if (line.type === \"title\") {\n\t\t\tvar title = parseTitle(line.message, options);\n\t\t\tparser(\"Parsed title %o\", title);\n\t\t\tfor (var prop in title) {\n\t\t\t\tworkingCommit[prop] = title[prop];\n\t\t\t}\n\t\t\tif (!workingCommit.title) {\n\t\t\t\t// The parser doesn't return a title\n\t\t\t\tworkingCommit.title = line.message;\n\t\t\t}\n\t\t} else {\n\t\t\tworkingCommit[line.type] = line.message;\n\t\t}\n\t});\n\treturn commits;\n}\n\nfunction parseLine (line) {\n\tif (line === newCommit) {\n\t\treturn {\n\t\t\ttype : \"new\"\n\t\t};\n\t}\n\n\tvar match = line.match(/^([a-zA-Z]+1?)\\s?:\\s?(.*)$/i);\n\n\tif (match) {\n\t\treturn {\n\t\t\ttype : match[1],\n\t\t\tmessage : match[2].trim()\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\ttype : \"message\",\n\t\t\tmessage : line.substring(1) // padding\n\t\t};\n\t}\n}\n\nfunction parseTitle (title, options) {\n\tvar expression = options.title;\n\tvar names = options.meaning;\n\tparser(\"Parsing title '%s' with regular expression '%s' and meanings %o\", title, expression, names);\n\n\tvar match = title.match(expression);\n\tif (!match) {\n\t\treturn {\n\t\t\ttitle : title\n\t\t};\n\t} else {\n\t\tvar builtObject = {};\n\t\tfor (var i = 0; i < names.length; i += 1) {\n\t\t\tvar name = names[i];\n\t\t\tvar index = i + 1;\n\t\t\tbuiltObject[name] = match[index];\n\t\t}\n\t\treturn builtObject;\n\t}\n}\n\nfunction normalizeNewlines(message) {\n\treturn message.replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, \"\\n\").replace(/^\\uFEFF/, '');\n}\n"}